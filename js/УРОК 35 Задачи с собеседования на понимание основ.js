'use strict';

let x = 5; alert(x++);  // постфиксная запись. Поэтому сначала вернёт 5, а потом увеличит, так что ОТВЕТ: 5
// если бы было alert(++x); то было бы сразу 6
 
/* •	Чему равно такое выражение: */ [ ] + false - null + true ?  
console.log([] + false); //когда мы работаем с пустым массивом в таких операциях, то он будет привёд к
//"СТРОКЕ" в этом примере: ""(пустая строка) = [] (пустому массиву), ОТВЕТ: "false" (но не булиновый, а пустая строка)
console.log([] + false - null); // получаем NaN
console.log([] + false- null + true); //всё-равно получаем NaN,
//итого ОТВЕТ: NaN

let y = 1;
let x = y = 2; 
alert(x); // ОТВЕТ: 2

/* •	Чему равна сумма  */ [] + 1 + 2? //ОТВЕТ: 12, потому что пустая строка, в которой значения 1 и значение в 2 в ряд, и получаем: 12

•/* 	Что выведет этот код: */ alert( "1"[0] )? //ОТВЕТ: 1

/* •	Чему равно */ 2 && 1 && null && 0 && undefined // ОПЕРАТОР И всегда запинается на ЛЖИ, поэтому ответ "НАЛ"(2 - это тру, 1 - тоже, налл - ФОЛС), 
//его и возвращает

/* •	Есть ли разница между выражениями? */ !!( a && b ) и (a && b) //разница есть, "!!" (два знака отрицания) превращают выражение в булиновое, поэтому
// первое вырежание не равняется второму

/* •	Что выведет этот код: */ alert(null || 2 && 3 || 4) //заходим в таблицу приоритета операторов, сначала выполняется "И" (2 и 3), возвращает последнее
//тру значение (3), т.к. "или" запинается на правде, то "налл" или "3" мы получаем 3, и наконец 3 или 4, т.к. "ИЛИ" запинается на правде, то получаем 3
//ОТВЕТ: 3

a = [1, 2, 3]; b = [1, 2, 3]; // Правда ли что a == b, ОТВЕТ: Нет    У нас 2 массива, которые просто содержат одинаковые данные
//const a = [1, 2 ,3];
//const b = [1, 2 ,3]; Объяснение: например у нас 2 ящика, оба содержат по 50 зеленых яблок, НО РАЗНЫХ, и там и там яблоки. То есть это разные хранилища
//информации.

/* •	Что выведет этот код: */ alert( +"Infinity" ); //ответ: infinity

/* •	Верно ли сравнение: */ "Ёжик" > "яблоко" //тут нужно открыть таблицу с символами "ЮНИКОД" и посмотреть кто на каких местах находится
//сравнивать такое МОЖНО! ОТВЕТ: false (яблоко больше ёжика,если бы было наоборот, было бы тру)

/* •	Чему равно */ 0 || "" || 2 || undefined || true || falsе ? //"ИЛИ" запинается на правде (0 - это фолс, пустая строка - это фолс, дальше натыкаемся на 2)
//2 - это тру, поэтому получаем 2


for(var i=0; i<10; i++) {
    console.log(i);
  }